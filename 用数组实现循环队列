#include<iostream>
#include<vector>
#include<string>
#include<queue>

using namespace std;

template<typename T>
class MyQueue {
public:
	MyQueue();
	~MyQueue();
	bool pop();
	int size();
	void push(T t);
private:
	T* arr;
	int index1;
	int index2;
	int count;
};

template<typename T>
MyQueue<T>::MyQueue() {
	arr = new T[10];
	if (!arr) cout << "QAQ" << endl;
}
template<typename T>
MyQueue<T>::~MyQueue() {
	if (arr) {
		delete[] arr;
		arr = NULL;
	}
}

template<typename T>
int MyQueue<T>::size() {
	return count;
}

template<typename T>
void MyQueue<T>::push(T t) {
	if (count >= 10) { 
		cout << "failed" << endl; 
		return;
	}
	if (index2 >= 10) index2 -= 10;
	arr[index2++] = t;
	count++;
}

template<typename T>
bool MyQueue<T>::pop() {
	if (count == 0) return false;
	T x= arr[index1++];
	cout << x << endl;
	if (index1 >= 10) index1 -= 10;
	count--;
	return true;
}

void main (){
	MyQueue<int>a;
	a.push(1);
	a.push(2);
	a.push(3);
	a.pop();
	a.push(4);
	a.push(5);
	a.push(6);
	a.pop();
	a.push(7);
	a.push(8);
	a.push(9);
	a.push(10);
	a.push(11);
	a.push(12);
	a.pop();
	a.push(13);
	a.pop();
	a.pop();
	a.pop();
	a.pop();
	a.pop();
	a.pop();
	a.pop();
	a.pop();
	a.pop();
	a.pop();
	a.push(1);
	cout << a.size()<<endl;
	system("pause");
}
